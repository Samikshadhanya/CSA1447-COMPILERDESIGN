# Compiler Design Laboratory Experiments

A comprehensive collection of compiler design experiments focused on lexical analysis, syntax analysis, predictive parsing, grammar transformations, and intermediate code generation. This repository includes practical implementations that bridge theoretical concepts and real-world compiler construction.

---

## üìå Project Overview

This project showcases fundamental principles of **compiler design** through hands-on implementation in C and Lex. The experiments span lexical analyzers, parsing techniques, grammar optimizations, and intermediate representations, forming the backbone of modern compiler construction.

---

## üîß Key Technologies and Concepts

* **Lexical Analysis** ‚Äì Token recognition, whitespace handling, comment detection, identifier validation
* **Grammar Processing** ‚Äì Left recursion and left factoring elimination, FIRST and FOLLOW computation
* **Parsing Techniques** ‚Äì Recursive descent parsing, operator precedence parsing, shift-reduce parsing
* **Intermediate Code Generation** ‚Äì Three-address code (TAC), backend compiler logic
* **Symbol Table Management** ‚Äì Symbol handling and manipulation techniques
* **Lex Programming** ‚Äì Automating scanners for source code pattern recognition

---

## üß™ Experiment Categories

### 1. **Lexical Analysis**

Designing scanners to recognize tokens, comments, identifiers, operators, and whitespace using C and Lex. These form the first phase of a compiler pipeline.

### 2. **Grammar and Parsing**

Implementations for computing FIRST and FOLLOW sets, eliminating ambiguities in grammars, and applying top-down or bottom-up parsing strategies.

### 3. **Syntax and Code Generation**

Generation of recursive descent parsers, operator precedence parsers, shift-reduce parsers, and intermediate representations like TAC.

### 4. **Lex Programs**

Advanced Lex scripts that analyze C programs and structured text files such as HTML, demonstrating automation of lexical analysis tasks.

---

## üéØ Learning Outcomes

Through this lab, learners gain hands-on experience in:

* Designing lexical analyzers in C and Lex
* Constructing predictive parsers for context-free grammars
* Applying parsing techniques to validate syntax
* Generating intermediate code from high-level language constructs
* Managing symbol tables for compiler operations
* Using LEX to automate scanning tasks across formats

---

## üìÅ Experiment Index

| Exp. No. | Title                                                                   |
| -------- | ----------------------------------------------------------------------- |
| 1‚Äì6      | Lexical Analyzer (Identifiers, Comments, Operators, Spaces, Validation) |
| 7‚Äì8      | FIRST() and FOLLOW() Set Computation                                    |
| 9‚Äì10     | Grammar Transformation (Left Recursion & Left Factoring)                |
| 11       | Symbol Table Operations                                                 |
| 12‚Äì13    | Recursive Descent & Predictive Parsing                                  |
| 14‚Äì15    | Shift Reduce and Operator Precedence Parsing                            |
| 16       | Three Address Code Generation                                           |
| 17‚Äì18    | Backend Compiler Logic and File Analysis                                |
| 19‚Äì20    | LEADING() and TRAILING() Computation                                    |
| 21‚Äì24    | Lex Programs (Word Count, Constants, Macros, HTML Tag Recognition)      |


